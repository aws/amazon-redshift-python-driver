[tool.poetry]
name = "redshift_connector"
version = "2.0.908"
description = "Redshift interface library"
authors = ["Amazon Web Services <redshift-drivers@amazon.com>"]
license = "Apache License 2.0"
keywords = ["redshift", "dbapi"]
homepage = "https://github.com/aws/amazon-redshift-python-driver"
readme = "README.rst"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: BSD License",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.6",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: Implementation",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python :: Implementation :: Jython",
    "Programming Language :: Python :: Implementation :: PyPy",
    "Operating System :: OS Independent",
    "Topic :: Database :: Front-Ends",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
include = ["*.py", "*.crt", "LICENSE", "NOTICE"]

[tool.poetry.dependencies]
python = ">=3.6.1"
scramp = ">=1.2.0,<1.5.0"
pytz = ">=2020.1"
beautifulsoup4 = ">=4.7.0,<5.0.0"
boto3 = ">=1.9.201,<2.0.0"
requests = ">=2.23.0,<3.0.0"
lxml = ">=4.6.5"
botocore = ">=1.12.201,<2.0.0"
packaging = "*"
importlib-metadata = ">=0.22"

[tool.poetry.dev-dependencies]
pytest = ">=5.4.0,<5.5.0"
mypy = ">=0.782"
pre-commit = ">=2.6.0"
pytest-cov = ">=2.10.0"
pytest-mock = ">=1.11.1,<=3.2.0"
docutils = ">=0.14"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.extras]
full = ["numpy", "pandas"]

# #!/usr/bin/env python
# import os
# import sys
# import typing

# from setuptools import find_packages, setup
# from setuptools.command.install import install as InstallCommandBase
# from setuptools.command.test import test as TestCommand
# from setuptools.dist import Distribution
# from wheel.bdist_wheel import bdist_wheel as BDistWheelCommandBase


# class BasePytestCommand(TestCommand):
#     user_options: typing.List = []
#     test_dir: typing.Optional[str] = None

#     def initialize_options(self):
#         TestCommand.initialize_options(self)

#     def finalize_options(self):
#         TestCommand.finalize_options(self)
#         self.test_args = []
#         self.test_suite = True

#     def run_tests(self):
#         import pytest

#         src_dir = os.getenv("SRC_DIR", "")
#         if src_dir:
#             src_dir += "/"
#         args = [
#             self.test_dir,
#             "--cov=redshift_connector",
#             "--cov-report=xml",
#             "--cov-report=html",
#         ]

#         errno = pytest.main(args)
#         sys.exit(errno)


# class UnitTestCommand(BasePytestCommand):
#     test_dir: str = "test/unit"


# class IntegrationTestCommand(BasePytestCommand):
#     test_dir = "test/integration"


# class BinaryDistribution(Distribution):
#     def has_ext_modules(self):
#         return True


# class InstallCommand(InstallCommandBase):
#     """Override the installation dir."""

#     def finalize_options(self):
#         ret = InstallCommandBase.finalize_options(self)
#         self.install_lib = self.install_platlib
#         return ret


# class BDistWheelCommand(BDistWheelCommandBase):
#     def finalize_options(self):
#         super().finalize_options()
#         self.root_is_pure = False
#         self.universal = True

#     def get_tag(self):
#         python, abi, plat = "py3", "none", "any"
#         return python, abi, plat


# custom_cmds = {
#     "bdist_wheel": BDistWheelCommand,
#     "unit_test": UnitTestCommand,
#     "integration_test": IntegrationTestCommand,
# }

# if os.getenv("CUSTOMINSTALL", False):
#     custom_cmds["install"] = InstallCommand
# elif "install" in custom_cmds:
#     del custom_cmds["install"]


# setup(
#     include_package_data=True,
#     cmdclass=custom_cmds,
# )
